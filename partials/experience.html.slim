div
  .title.text-lg.mb-2
    | Work Experience
  / hako
  div.mb-2
    .font-semibold
      | Software Engineer
    p
      span.italic CH Resource
      | &nbsp;|&nbsp;
      span.italic May 2022 - Dec 2022
    div
      ul.relative
        li.mb-1
          | &mdash; Delivered code with strict convention, test coverage, and clear explanation.
        li.mb-1
          | &mdash; Researched, integrated, and migrated 400k-user data to customer analytics platform (Amplitude) and customer engagement platform (Braze).
        li.mb-1
          | &mdash; Analayzed and gathered requirements, wrote test scenarios for QC team to test external platforms, and guided Product team to operate.
  / SS
  /div.mb-2
    .font-semibold
      | Full-stack Software Engineer
    p
      span.italic Survey Exchange platform
      | &nbsp;|&nbsp;
      span.italic Dec 2021 - Present
    div
      ul.relative
        li.mb-1
          / the core function was coded in application layer with loop, really hard to understand and impossible for modification and error-prone
          / -> spliting the core into smaller queries, then each query will be writen in a query class.
          / -> easy to understand, testable, reusable, each query can be combined together to a bigger query fit other business flow.
          | &mdash; Restructure the problematic core function by refactoring into small, and testable chunks.
        li.mb-1
          | &mdash; Continously improve the quality of the product by inspecting thoroughly Rails app, React app, UI/UX, and CI/CD.
        li.mb-1
          | &mdash; Reply and advice appropriate solutions to technical questions, and business flow inquiries.

  // sak
  div.mt-4
    .font-semibold
      | Software Engineer
    p
      |
      span.italic OIVAN
      | &nbsp;|&nbsp;
      span.italic April 2021 - May 2022
    div
      ul.relative
        / Learned: coordination, communcation, workflow
        / Hard: big project with around 4-5 teams, ~20 rails services, each feature can have upto 8 involved services
        / Always have code conflict, every single change in one service can causeside effect in other services
        / => Carefullness, unit/intergration testing, communcation
        / Document everything in confluence including business logic, edge cases, API spec, tech, gem, etc
        li.mb-1
          | &mdash; Coordinated smoothly with an 8-person Scrum team on a micro-services utilizing Ruby on Rails and Angular.
        li.mb-1
          | &mdash; Researched product requirement documents and came up with feasible estimations from both technical and product perspectives.
        li.mb-1
          / jsonapi, how to use includes to prevent N+1 queries, applying includes in backend and front-end, writing documentation for it.
          | &mdash; Performed code review, outlined poor pratices, and made recommendations for team members on best practices.

  / bib and col
  div.mt-4
    .font-semibold
      | Ruby on Rails Developer
    p
      span.italic Golden Owl Consulting
      | &nbsp;|&nbsp;
      span.italic March 2018 - April 2021
    div
      ul.relative
        li.mb-1
          | &mdash; Automated processing 10k+ orders and post-payment procedure by integrating payment gateway and 3rd-parties.
        li.mb-1
          / How?
          / Upgrade rails version, development code reload 10 times faster (30s to 3s)
          / Upgrade react version, reduce code reload by 70% (10s to 3s)
          / Improved test execution time by half
          / Rails application is really slow on development using gem administrate
          / -> upgrade to higher rails version solve it
          | &mdash; Identified the bottle neck, used jmeter to carry out stress testing, and reported potential problems when the application was at its peak.
        li.mb-1
          | &mdash; Reduced unit tests elapsed time from 7 minutes to 3 minutes.
        li.mb-1
          | &mdash; Examined and improved development code reloading in both Rails app and React app.
        / By comparing among libraries, solutions
        / Which criteria to compare?
        / => Pros and cons, customization, scalability, possibility, time taken, needed at that time
        /li.mb-1
          / They may ask how?
          / => Design pattern/design principles
          / => To be more specific?
          / => Strategy, Template, Decorator, Factory Method
          / => Query Object, Service Object
          / => SO(LID), DRY, YAGNI, Tell don't ask, etc
          | &mdash; Commit readable, scalable code with proper design principles and design patterns
